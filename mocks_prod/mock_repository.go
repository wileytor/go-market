// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/lahnasti/GolandProjects/go-market/products/internal/repository/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/wileytor/go-market/common/models"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockRepository) AddProduct(arg0 models.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockRepositoryMockRecorder) AddProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockRepository)(nil).AddProduct), arg0)
}

// DeleteProducts mocks base method.
func (m *MockRepository) DeleteProducts() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProducts")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProducts indicates an expected call of DeleteProducts.
func (mr *MockRepositoryMockRecorder) DeleteProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProducts", reflect.TypeOf((*MockRepository)(nil).DeleteProducts))
}

// GetAllProducts mocks base method.
func (m *MockRepository) GetAllProducts() ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts")
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockRepositoryMockRecorder) GetAllProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockRepository)(nil).GetAllProducts))
}

// GetProductByID mocks base method.
func (m *MockRepository) GetProductByID(arg0 int) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", arg0)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockRepositoryMockRecorder) GetProductByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockRepository)(nil).GetProductByID), arg0)
}

// GetProductPurchases mocks base method.
func (m *MockRepository) GetProductPurchases(arg0 int) ([]models.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductPurchases", arg0)
	ret0, _ := ret[0].([]models.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductPurchases indicates an expected call of GetProductPurchases.
func (mr *MockRepositoryMockRecorder) GetProductPurchases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductPurchases", reflect.TypeOf((*MockRepository)(nil).GetProductPurchases), arg0)
}

// GetUserPurchases mocks base method.
func (m *MockRepository) GetUserPurchases(arg0 int) ([]models.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPurchases", arg0)
	ret0, _ := ret[0].([]models.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPurchases indicates an expected call of GetUserPurchases.
func (mr *MockRepositoryMockRecorder) GetUserPurchases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPurchases", reflect.TypeOf((*MockRepository)(nil).GetUserPurchases), arg0)
}

// IsProductUnique mocks base method.
func (m *MockRepository) IsProductUnique(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProductUnique", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsProductUnique indicates an expected call of IsProductUnique.
func (mr *MockRepositoryMockRecorder) IsProductUnique(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProductUnique", reflect.TypeOf((*MockRepository)(nil).IsProductUnique), arg0)
}

// MakePurchase mocks base method.
func (m *MockRepository) MakePurchase(arg0 models.Purchase) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePurchase", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakePurchase indicates an expected call of MakePurchase.
func (mr *MockRepositoryMockRecorder) MakePurchase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePurchase", reflect.TypeOf((*MockRepository)(nil).MakePurchase), arg0)
}

// SetDeleteStatus mocks base method.
func (m *MockRepository) SetDeleteStatus(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeleteStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeleteStatus indicates an expected call of SetDeleteStatus.
func (mr *MockRepositoryMockRecorder) SetDeleteStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeleteStatus", reflect.TypeOf((*MockRepository)(nil).SetDeleteStatus), arg0)
}

// UpdateProduct mocks base method.
func (m *MockRepository) UpdateProduct(arg0 int, arg1 models.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockRepositoryMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockRepository)(nil).UpdateProduct), arg0, arg1)
}

// MockPurchaseRepository is a mock of PurchaseRepository interface.
type MockPurchaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPurchaseRepositoryMockRecorder
}

// MockPurchaseRepositoryMockRecorder is the mock recorder for MockPurchaseRepository.
type MockPurchaseRepositoryMockRecorder struct {
	mock *MockPurchaseRepository
}

// NewMockPurchaseRepository creates a new mock instance.
func NewMockPurchaseRepository(ctrl *gomock.Controller) *MockPurchaseRepository {
	mock := &MockPurchaseRepository{ctrl: ctrl}
	mock.recorder = &MockPurchaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPurchaseRepository) EXPECT() *MockPurchaseRepositoryMockRecorder {
	return m.recorder
}

// GetProductPurchases mocks base method.
func (m *MockPurchaseRepository) GetProductPurchases(arg0 int) ([]models.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductPurchases", arg0)
	ret0, _ := ret[0].([]models.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductPurchases indicates an expected call of GetProductPurchases.
func (mr *MockPurchaseRepositoryMockRecorder) GetProductPurchases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductPurchases", reflect.TypeOf((*MockPurchaseRepository)(nil).GetProductPurchases), arg0)
}

// GetUserPurchases mocks base method.
func (m *MockPurchaseRepository) GetUserPurchases(arg0 int) ([]models.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPurchases", arg0)
	ret0, _ := ret[0].([]models.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPurchases indicates an expected call of GetUserPurchases.
func (mr *MockPurchaseRepositoryMockRecorder) GetUserPurchases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPurchases", reflect.TypeOf((*MockPurchaseRepository)(nil).GetUserPurchases), arg0)
}

// MakePurchase mocks base method.
func (m *MockPurchaseRepository) MakePurchase(arg0 models.Purchase) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePurchase", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakePurchase indicates an expected call of MakePurchase.
func (mr *MockPurchaseRepositoryMockRecorder) MakePurchase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePurchase", reflect.TypeOf((*MockPurchaseRepository)(nil).MakePurchase), arg0)
}

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProductRepository) AddProduct(arg0 models.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductRepositoryMockRecorder) AddProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProductRepository)(nil).AddProduct), arg0)
}

// DeleteProducts mocks base method.
func (m *MockProductRepository) DeleteProducts() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProducts")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProducts indicates an expected call of DeleteProducts.
func (mr *MockProductRepositoryMockRecorder) DeleteProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProducts", reflect.TypeOf((*MockProductRepository)(nil).DeleteProducts))
}

// GetAllProducts mocks base method.
func (m *MockProductRepository) GetAllProducts() ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts")
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockProductRepositoryMockRecorder) GetAllProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockProductRepository)(nil).GetAllProducts))
}

// GetProductByID mocks base method.
func (m *MockProductRepository) GetProductByID(arg0 int) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", arg0)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockProductRepositoryMockRecorder) GetProductByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockProductRepository)(nil).GetProductByID), arg0)
}

// IsProductUnique mocks base method.
func (m *MockProductRepository) IsProductUnique(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProductUnique", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsProductUnique indicates an expected call of IsProductUnique.
func (mr *MockProductRepositoryMockRecorder) IsProductUnique(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProductUnique", reflect.TypeOf((*MockProductRepository)(nil).IsProductUnique), arg0)
}

// SetDeleteStatus mocks base method.
func (m *MockProductRepository) SetDeleteStatus(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeleteStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeleteStatus indicates an expected call of SetDeleteStatus.
func (mr *MockProductRepositoryMockRecorder) SetDeleteStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeleteStatus", reflect.TypeOf((*MockProductRepository)(nil).SetDeleteStatus), arg0)
}

// UpdateProduct mocks base method.
func (m *MockProductRepository) UpdateProduct(arg0 int, arg1 models.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductRepositoryMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductRepository)(nil).UpdateProduct), arg0, arg1)
}
